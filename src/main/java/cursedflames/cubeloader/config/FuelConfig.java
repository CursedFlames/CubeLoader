package cursedflames.cubeloader.config;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import cursedflames.cubeloader.CubeLoader;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;

public class FuelConfig {
	public class FuelType {
		public String name;
		/** fuel burnt per loader per tick */
		public int fuelPerTick;
		public long maxFuel;

		public FuelType(String name, int fuelPerTick, long maxFuel) {
			this.name = name;
			this.fuelPerTick = fuelPerTick;
			this.maxFuel = maxFuel;
		}
	}

	public class FuelInput {
		/** item */
		public String inputType;
		/** item, oredict, fuelItem */
		public String matchType;
		public List<String> match;
		public Map<String, List<Integer>> fuels;
		public long fuelValue;

		public FuelInput(String inputType, String matchType, List<String> match,
				Map<String, List<Integer>> fuels, long fuelValue) {
			this.inputType = inputType;
			this.matchType = matchType;
			this.match = match;
			this.fuels = fuels;
			this.fuelValue = fuelValue;
		}

	}

	public Map<String, FuelType> fuelTypes = new HashMap<>();

	public NBTTagCompound toNBT() {
		return new NBTTagCompound();
	}

	// TODO clean up warnings
	public void fromNBT(NBTTagCompound tag) {
		boolean warned = false;
		boolean ignore = tag.getBoolean("ignoreWarnings")==true;
		if (tag.hasKey("fuelTypes", 10)&&!tag.getCompoundTag("fuelTypes").hasNoTags()) {
			NBTTagCompound types = tag.getCompoundTag("fuelTypes");
			for (Iterator<String> names = types.getKeySet().iterator(); names.hasNext();) {
				String name = names.next();
				NBTTagCompound fuelTag = types.getCompoundTag(name);
				// JsonToNBT;
				FuelType fuel = new FuelType(name,
						fuelTag.hasKey("fuelPerTick", 3) ? fuelTag.getInteger("fuelPerTick") : 1,
						fuelTag.hasKey("maxFuel", 4) ? fuelTag.getLong("maxFuel")
								: fuelTag.hasKey("maxFuel", 3) ? fuelTag.getInteger("maxFuel")
										: -1);
				fuelTypes.put(name, fuel);
			}
		} else {
			if (!ignore) {
				CubeLoader.logger.warn(
						"Fuel config file does not contain any fuel types, they will be autogenerated.");
				warned = true;
			}
		}
		if (tag.hasKey("fuelInputs")) {
			NBTTagList inputs = tag.getTagList("fuelInputs", 10);
			for (int i = 0; i<inputs.tagCount(); i++) {
				NBTTagCompound input = (NBTTagCompound) inputs.get(i);
				if (!input.hasKey("inputType", 8)||!input.hasKey("matchType", 8))
					continue;
				String inputType = input.getString("inputType");
				String matchType = input.getString("matchType");
				List<String> match;
				if (!matchType.equals("fuelItem")) {
					if (input.hasKey("match", 9)) {
						NBTTagList nbtMatch = input.getTagList("match", 8);
						if (nbtMatch.tagCount()==0) {
							if (!ignore) {
								CubeLoader.logger.warn("Fuel input "+i
										+" match list does not contain any match strings, skipping this entry");
								warned = true;
								continue;
							}
						} else {
							match = new ArrayList<>();
							for (int j = 0; j<nbtMatch.tagCount(); j++) {
								String matchStr = ((NBTTagString) (nbtMatch.get(j))).getString();
								if (!matchStr.isEmpty())
									match.add(matchStr);
							}
						}
					} else if (input.hasKey("match", 8)&&!input.getString("match").isEmpty()) {
						match = new ArrayList<>();
						match.add(input.getString("match"));
					} else {
						if (!ignore) {
							CubeLoader.logger.warn("Fuel input "+i
									+" does not have any match string, skipping this entry");
							warned = true;
							continue;
						}
					}
				} else {
					if (input.hasKey("match")) {
						if (!ignore) {
							CubeLoader.logger.warn("Fuel input "+i
									+" has a superfluous match tag that will be ignored.");
							warned = true;
							continue;
						}
					}
				}
			}
		}
		if (warned&&!ignore) {
			CubeLoader.logger.warn(
					"To disable warnings while reading fuel config, add '\"ignoreWarnings\": true' to the JSON file");
		}
	}
}
